import { useEffect, useState } from "react";
import axios from "axios";
import "./App.css";
import "fontawesome-free/css/all.min.css";

const API_URL = "http://localhost:5000/api";

type FileItem = {
  name: string;
  isDirectory: boolean;
  path: string;
  type: string;
  size: number | null; // taille en octets
  modifiedAt: string; // date ISO
};

function App() {
  const [currentPath, setCurrentPath] = useState("");
  const [files, setFiles] = useState<FileItem[]>([]);
  const [loading, setLoading] = useState(false);

  // Charger les fichiers
  useEffect(() => {
    const fetchFiles = async () => {
      setLoading(true);
      try {
        const res = await axios.get(`${API_URL}/files`, {
          params: { path: currentPath },
        });
        setFiles(res.data);
      } catch (err) {
        console.error("Erreur API:", err);
        setFiles([]);
      } finally {
        setLoading(false);
      }
    };
    fetchFiles();
  }, [currentPath]);

  // G√©rer le double-clic
  const handleDoubleClick = (file: FileItem) => {
    if (file.isDirectory) {
      setCurrentPath(currentPath ? `${currentPath}/${file.name}` : file.name);
    } else {
      const downloadUrl = `${API_URL}/download?path=${encodeURIComponent(
        currentPath ? `${currentPath}/${file.name}` : file.name
      )}`;
      window.location.href = downloadUrl;
    }
  };

  // G√©n√©rer ic√¥ne
  const getIcon = (file: FileItem) => {
    if (file.isDirectory) return "fas fa-folder";
    const ext = file.name.split(".").pop()?.toLowerCase();
    switch (ext) {
      case "xlsx":
      case "xls":
        return "fas fa-file-excel";
      case "docx":
      case "doc":
        return "fas fa-file-word";
      case "pptx":
      case "ppt":
        return "fas fa-file-powerpoint";
      case "pdf":
        return "fas fa-file-pdf";
      case "jpg":
      case "jpeg":
      case "png":
        return "fas fa-file-image";
      case "zip":
      case "rar":
        return "fas fa-file-archive";
      default:
        return "fas fa-file";
    }
  };

  // Formater la taille
  const formatSize = (size: number | null) => {
    if (size === null) return "-";
    if (size < 1024) return `${size} o`;
    if (size < 1024 * 1024) return `${(size / 1024).toFixed(1)} Ko`;
    if (size < 1024 * 1024 * 1024) return `${(size / (1024 * 1024)).toFixed(1)} Mo`;
    return `${(size / (1024 * 1024 * 1024)).toFixed(1)} Go`;
  };

  // Fil d‚ÄôAriane
  const renderBreadcrumb = () => {
    const parts = currentPath.split("/").filter(Boolean);
    return (
      <div className="breadcrumb">
        <button
          type="button"
          className="breadcrumb-btn"
          onClick={() => setCurrentPath("")}
        >
          Dossiers
        </button>
        {parts.map((part, i) => {
          const pathUpTo = parts.slice(0, i + 1).join("/");
          return (
            <button
              key={pathUpTo}
              type="button"
              className="breadcrumb-btn-part"
              onClick={() => setCurrentPath(pathUpTo)}
            >
              {" / " + part}
            </button>
          );
        })}
      </div>
    );
  };

  return (
    <div className="container">
      <h1>üìÇ Ressources Documentaires ENEO</h1>
      {renderBreadcrumb()}
      {loading ? (
        <p>Chargement...</p>
      ) : (
        <table>
          <thead>
            <tr>
              <th>Nom</th>
              <th>Type</th>
              <th>Taille</th>
              <th>Modifi√© le</th>
            </tr>
          </thead>
          <tbody>
            {files.map((f, i) => (
              <tr key={i} onDoubleClick={() => handleDoubleClick(f)}>
                <td>
                  <i className={`${getIcon(f)} file-icon`}></i> {f.name}
                </td>
                <td>{f.type}</td>
                <td>{formatSize(f.size)}</td>
                <td>{new Date(f.modifiedAt).toLocaleString()}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default App;

<div className="pagination">
    {/* Bouton Pr√©c√©dent */}
    <button onClick={onPrevious} disabled={currentPage === 1} className="arrow-button">
        {"<"}
    </button>

    {paginationRange?.map((pageNumber, index) => {
        // Si c'est un point, on affiche un √©l√©ment non cliquable
        if (pageNumber === DOTS) {
            return <span key={index} className="ellipsis">&#8230;</span>;
        }

        // Sinon, on affiche le bouton de page
        return (
            <button
                key={index}
                onClick={() => setCurrentPage(pageNumber as number)}
                className={currentPage === pageNumber ? "active-page" : ""}
            >
                {pageNumber}
            </button>
        );
    })}

    {/* Bouton Suivant */}
    <button onClick={onNext} disabled={currentPage === totalPages} className="arrow-button">
        {">"}
    </button>
</div>